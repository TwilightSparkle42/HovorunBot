"""initial schema"""

from typing import Sequence
from uuid import UUID

import sqlalchemy as sa
from alembic import op

revision: str = "1c2e2a750303"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chat",
        sa.Column("telegram_chat_id", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("chat_type", sa.String(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("deleted", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("deleted_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("telegram_chat_id"),
    )
    op.create_table(
        "provider",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("is_default", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("1"), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("deleted", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("deleted_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "model",
        sa.Column("provider_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), server_default=sa.text("1"), nullable=False),
        sa.Column("is_default", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("deleted", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("deleted_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["provider.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("provider_id", "name", name="uq_model_provider_name"),
    )
    op.create_table(
        "model_configuration",
        sa.Column("model_id", sa.Uuid(), nullable=False),
        sa.Column("system_message", sa.Text(), nullable=True),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("top_p", sa.Float(), nullable=True),
        sa.Column("top_k", sa.Integer(), nullable=True),
        sa.Column("max_output_tokens", sa.Integer(), nullable=True),
        sa.Column("presence_penalty", sa.Float(), nullable=True),
        sa.Column("frequency_penalty", sa.Float(), nullable=True),
        sa.Column("stop_sequences", sa.JSON(), nullable=True),
        sa.Column("response_format", sa.String(), nullable=True),
        sa.Column("extras", sa.JSON(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("deleted", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("deleted_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["model.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chat_configuration",
        sa.Column("chat_id", sa.Uuid(), nullable=False),
        sa.Column("allowed", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("model_configuration_id", sa.Uuid(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("deleted", sa.Boolean(), server_default=sa.text("0"), nullable=False),
        sa.Column("deleted_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["chat_id"],
            ["chat.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_configuration_id"],
            ["model_configuration.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("chat_id"),
        sa.UniqueConstraint("model_configuration_id"),
    )
    _seed_default_provider_and_model()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("chat_configuration")
    op.drop_table("model_configuration")
    op.drop_table("model")
    op.drop_table("provider")
    op.drop_table("chat")
    # ### end Alembic commands ###


def _seed_default_provider_and_model() -> None:
    provider_id = UUID("dde6a535-39fb-4113-bb9d-eec53cb373c2")
    model_id = UUID("aef54911-0667-4399-b19e-61901fe85251")

    provider = sa.table(
        "provider",
        sa.column("id", sa.UUID),
        sa.column("name", sa.String),
        sa.column("display_name", sa.String),
        sa.column("is_default", sa.Boolean),
        sa.column("active", sa.Boolean),
    )

    model = sa.table(
        "model",
        sa.column("id", sa.UUID),
        sa.column("provider_id", sa.UUID),
        sa.column("name", sa.String),
        sa.column("display_name", sa.String),
        sa.column("active", sa.Boolean),
        sa.column("is_default", sa.Boolean),
    )

    op.bulk_insert(
        provider,
        [
            {
                "id": provider_id,
                "name": "grok",
                "display_name": "xAI Grok",
                "is_default": True,
                "active": True,
            },
        ],
    )

    op.bulk_insert(
        model,
        [
            {
                "id": model_id,
                "provider_id": provider_id,
                "name": "grok-4-mini",
                "display_name": "Grok 4 Mini",
                "active": True,
                "is_default": True,
            },
        ],
    )
